{"version":3,"sources":["TextInput.js","NyhCostForm.js","CNYH_logo.jpeg","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","TextInput","props","TextField","variant","color","size","InputLabelProps","shrink","InputProps","startAdornment","InputAdornment","position","nyHealthFields","text","key","NyhCostForm","type","onChange","formFields","map","field","Grid","item","Typography","xs","container","justifyContent","alignItems","label","name","value","nyHealth","annual","disabled","monthly","app","textPadding","paddingBottom","header","backgroundColor","palette","common","white","zIndex","logo","width","height","calculations","fontWeight","individualWorksheetFields","twoFields","brackets","lowerBound","upperBound","baseCost","rate","Number","POSITIVE_INFINITY","App","classes","React","useState","step","setStep","initialFormState","planType","individualInputChoice","familyInputChoice","setFormFields","monthlyCost","setMonthlyCost","annualCost","setAnnualCost","illnessCost","setIllnessCost","nyhCost","setNyhCost","nyhMonthlyCost","setNyhMonthlyCost","add","arr","reduce","acc","val","addCommas","str","length","newString","j","i","split","reverse","join","slice","makeCalculations","combinedTotal","monthlyPayment","Object","values","deductibleLastYear","annualMax","otherNotCoveredCosts","totalAnnualDeductible","toFixed","makeNyhCalculation","regularIncome","otherIncome","keys","forEach","k","k2","push","r","regularBracket","find","b","o","otherBracket","makeNyhCalculations","total","filter","el","handleFormFieldChange","e","target","handleOnceNestedFormChange","replace","handleTwiceNestedFormChange","key1","key2","handleThriceNestedFormChange","key3","showCalculations","includes","showNyhCalculations","className","Box","p","borderBottom","top","gutterBottom","align","justify","src","alt","direction","spacing","RadioGroup","FormControlLabel","control","Radio","individual","family","style","marginTop","component","Button","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","primary","main","secondary","typography","fontFamily","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"wVAIMA,EAAYC,aAAW,SAACC,GAAD,MAAY,MAoB1BC,EAlBG,SAACC,GACDJ,IAChB,OACE,cAACK,EAAA,EAAD,2BACMD,GADN,IAEEE,QAAQ,WACRC,MAAM,YACNC,KAAK,QACLC,gBAAiB,CACfC,QAAQ,GAEVC,WAAY,CACVC,eAAgB,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,oBCdlBC,EAAiB,CACrB,CACEC,KAAM,gFACNC,IAAK,wBAEP,CACED,KAAM,0CACNC,IAAK,kBAEP,CACED,KAAM,0CACNC,IAAK,mBAEP,CACED,KAAM,0CACNC,IAAK,kBAEP,CACED,KAAM,8DACNC,IAAK,mBA6CMC,EAzCK,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,WAAnB,OAClB,mCACGN,EAAeO,KAAI,SAACC,GAAD,mCAClB,qCACE,cAACC,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,SAA6BiB,EAAMP,SAErC,eAACQ,EAAA,EAAD,CACEC,MAAI,EACJE,GAAI,EACJC,WAAS,EACTC,eAAe,gBACfC,WAAW,SALb,UAOE,cAACN,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAC,EAAD,CACEM,MAAM,SACNC,KAAMT,EAAMN,IACZgB,OAAiB,OAAVZ,QAAU,IAAVA,GAAA,UAAAA,EAAYa,gBAAZ,mBAAuBf,UAAvB,mBAA8BgB,cAA9B,eAAuCZ,EAAMN,OAAQ,GAC5DG,SAAUA,EAAS,WAAYD,EAAM,UACrCiB,YAAW,OAACf,QAAD,IAACA,GAAD,UAACA,EAAYa,gBAAb,iBAAC,EAAuBf,UAAxB,iBAAC,EAA8BkB,eAA/B,aAAC,EAAwCd,EAAMN,UAG9D,cAACO,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,kBAEF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAC,EAAD,CACEM,MAAM,UACNC,KAAMT,EAAMN,IACZgB,OAAiB,OAAVZ,QAAU,IAAVA,GAAA,UAAAA,EAAYa,gBAAZ,mBAAuBf,UAAvB,mBAA8BkB,eAA9B,eAAwCd,EAAMN,OAAQ,GAC7DG,SAAUA,EAAS,WAAYD,EAAM,WACrCiB,YAAW,OAACf,QAAD,IAACA,GAAD,UAACA,EAAYa,gBAAb,iBAAC,EAAuBf,UAAxB,iBAAC,EAA8BgB,cAA/B,aAAC,EAAuCZ,EAAMN,sBC3DxD,MAA0B,uCCenCjB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCoC,IAAK,GACLC,YAAa,CACXC,cAAe,IAEjBC,OAAQ,CACNC,gBAAiBxC,EAAMyC,QAAQC,OAAOC,MACtCC,OAAQ,KAEVC,KAAM,CACJC,MAAO,IACPC,OAAQ,QAEVC,aAAc,CACZC,WAAY,YAIVC,EAA4B,CAChC,CAAEpC,KAAM,WAAYqC,WAAW,EAAMpC,IAAK,YAC1C,CACED,KAAM,0CACNqC,WAAW,EACXpC,IAAK,kBAEP,CACED,KAAM,0CACNqC,WAAW,EACXpC,IAAK,kBAEP,CACED,KAAM,2CACNqC,WAAW,EACXpC,IAAK,iBAEP,CACED,KAAM,mEACNqC,WAAW,EACXpC,IAAK,yBAEP,CACED,KAAM,4CACNqC,WAAW,EACXpC,IAAK,sBAEP,CACED,KAAM,oCACNqC,WAAW,EACXpC,IAAK,aAEP,CACED,KAAM,mIACNqC,WAAW,EACXpC,IAAK,cAEP,CACED,KAAM,+CACNqC,WAAW,EACXpC,IAAK,cAEP,CACED,KAAM,wFACNqC,WAAW,EACXpC,IAAK,gBAEP,CACED,KAAM,oEACNqC,WAAW,EACXpC,IAAK,iBAEP,CACED,KAAM,2FACNqC,WAAW,EACXpC,IAAK,qBAEP,CACED,KAAM,uVACNqC,WAAW,EACXpC,IAAK,wBAEP,CACED,KAAM,6OACNqC,WAAW,EACXpC,IAAK,0BAIHqC,EAAW,CACf,CAAEC,WAAY,EAAGC,WAAY,MAAOC,SAAU,EAAGC,KAAM,GACvD,CAAEH,WAAY,KAAOC,WAAY,MAAOC,SAAU,EAAGC,KAAM,MAC3D,CAAEH,WAAY,IAAOC,WAAY,MAAOC,SAAU,KAAMC,KAAM,MAC9D,CAAEH,WAAY,KAAOC,WAAY,MAAOC,SAAU,KAAMC,KAAM,MAC9D,CAAEH,WAAY,IAAQC,WAAY,OAAQC,SAAU,MAAOC,KAAM,MACjE,CACEH,WAAY,IACZC,WAAYG,OAAOC,kBACnBH,SAAU,MACVC,KAAM,OAk2BKG,MA91Bf,WAAgB,IAAD,gBACPC,EAAU9D,IAChB,EAAwB+D,IAAMC,SAAS,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAmB,CACvBC,SAAU,aACVC,sBAAuB,QACvBC,kBAAmB,SAErB,EAAoCP,IAAMC,SAASG,GAAnD,mBAAO9C,EAAP,KAAmBkD,EAAnB,KACA,EAAsCR,IAAMC,SAAS,GAArD,mBAAOQ,EAAP,KAAoBC,EAApB,KACA,EAAoCV,IAAMC,SAAS,GAAnD,mBAAOU,EAAP,KAAmBC,EAAnB,KACA,EAAsCZ,IAAMC,SAAS,GAArD,mBAAOY,EAAP,KAAoBC,EAApB,KACA,EAA8Bd,IAAMC,SAAS,GAA7C,mBAAOc,EAAP,KAAgBC,EAAhB,KACA,EAA4ChB,IAAMC,SAAS,GAA3D,mBAAOgB,GAAP,KAAuBC,GAAvB,KAEMC,GAAM,SAACC,GACX,OAAOA,EAAIC,QAAO,SAACC,EAAKC,GACtB,OAAOD,IAAOC,IACb,IAGCC,GAAY,SAACC,GACjB,GAAIA,EAAIC,QAAU,EAAG,OAAOD,EAG5B,IAFA,IAAIE,EAAY,GACZC,EAAI,EACCC,EAAIJ,EAAIC,OAAS,EAAGG,GAAK,EAAGA,IACnCF,GAAaF,EAAII,GACbD,EAAI,IAAM,GAAW,IAANA,GAAiB,IAANC,IAC5BF,GAAa,KAEfC,IAGF,OADAD,EAAYA,EAAUG,MAAM,IAAIC,UAAUC,KAAK,KAC5BP,EAAIQ,OAAO,IAG1BC,GAAmB,SAAChF,GAAS,IAAD,EAImB,QAD/CiF,EAAgB,EACpB,GAA0C,WAA5B,OAAV7E,QAAU,IAAVA,OAAA,EAAAA,EAAU,UAAMJ,EAAN,iBAOZiF,IANyB,OAAV7E,QAAU,IAAVA,GAAA,UAAAA,EAAaJ,UAAb,eAAmBkF,gBACO,KAArC,OAAC9E,QAAD,IAACA,GAAD,UAACA,EAAaJ,UAAd,aAAC,EAAmBkF,gBACpB,KACoB,OAAV9E,QAAU,IAAVA,GAAA,UAAAA,EAAaJ,UAAb,eAAmByD,cAC7B,OAACrD,QAAD,IAACA,GAAD,UAACA,EAAaJ,UAAd,aAAC,EAAmByD,YACpB,QAEC,GAA0C,eAA5B,OAAVrD,QAAU,IAAVA,OAAA,EAAAA,EAAU,UAAMJ,EAAN,iBAAyC,CAAC,IAAD,UAO5DiF,IANyB,OAAV7E,QAAU,IAAVA,GAAA,UAAAA,EAAaJ,UAAb,eAAmBoB,SACmB,GAAjD6C,GAAIkB,OAAOC,OAAP,OAAchF,QAAd,IAAcA,GAAd,UAAcA,EAAaJ,UAA3B,aAAc,EAAmBoB,UACrC,KACoB,OAAVhB,QAAU,IAAVA,GAAA,UAAAA,EAAaJ,UAAb,eAAmBkB,QAC7B+C,GAAIkB,OAAOC,OAAP,OAAchF,QAAd,IAAcA,GAAd,UAAcA,EAAaJ,UAA3B,aAAc,EAAmBkB,SACrC,OAIU,OAAVd,QAAU,IAAVA,GAAA,UAAAA,EAAaJ,UAAb,eAAmBqF,qBAAsB,GAE/C,IACkC,UAK3B,EANH1B,EAAc,GAClB,OAAIvD,QAAJ,IAAIA,GAAJ,UAAIA,EAAaJ,UAAjB,aAAI,EAAmBsF,WACrB3B,IACE,OAACvD,QAAD,IAACA,GAAD,UAACA,EAAaJ,UAAd,aAAC,EAAmBsF,eACR,OAAVlF,QAAU,IAAVA,GAAA,UAAAA,EAAaJ,UAAb,mBAAmBkB,cAAnB,eAA2BqE,uBAAwB,GACM,MAA/C,OAAVnF,QAAU,IAAVA,GAAA,UAAAA,EAAaJ,UAAb,mBAAmBoB,eAAnB,eAA4BmE,uBAAwB,GAExD5B,EACEsB,MAA4B,OAAV7E,QAAU,IAAVA,GAAA,UAAAA,EAAaJ,UAAb,eAAmBwF,wBAAyB,GAElEhC,EAAec,IAAWW,EAAgB,IAAIQ,QAAQ,KACtD/B,EAAcY,GAAUW,EAAcQ,QAAQ,KAC9C7B,EACwC,WAA5B,OAAVxD,QAAU,IAAVA,OAAA,EAAAA,EAAU,UAAMJ,EAAN,iBACN,MACAsE,GAAUX,EAAY8B,QAAQ,MAIhCC,GAAqB,SAAC1F,GAAS,IAAD,EAC9B2F,EAAgB,GAChBC,EAAc,GAoClB,OAnCA,OAAIxF,QAAJ,IAAIA,GAAJ,UAAIA,EAAYa,gBAAhB,aAAI,EAAuBjB,KACzBmF,OAAOU,KAAKzF,EAAWa,SAASjB,IAAM8F,SAAQ,SAACC,GAC7CZ,OAAOU,KAAKzF,EAAWa,SAASjB,GAAK+F,IAAID,SAAQ,SAACE,GAChD,IAAMhF,EAAQZ,EAAWa,SAASjB,GAAK+F,GAAGC,GAC/B,yBAAPA,GAAwC,mBAAPA,EACnCJ,EAAYK,KAAW,WAANF,GAAkB/E,EAAiB,IAARA,GAE5C2E,EAAcM,KAAW,WAANF,GAAkB/E,EAAiB,IAARA,SAKlC2E,EAAcxB,QAAO,SAACC,EAAK8B,GAC7C,IAAMC,EAAiB9D,EAAS+D,MAC9B,SAACC,GAAD,OAAOH,GAAKG,EAAE9D,YAAc2D,GAAKG,EAAE/D,cAErC,OACE8B,EAGE,IAFD+B,EAAe3D,UACb0D,EAAIC,EAAe7D,YAAc6D,EAAe1D,QAGpD,GAEemD,EAAYzB,QAAO,SAACC,EAAKkC,GACzC,IAAMC,EAAelE,EAAS+D,MAC5B,SAACC,GAAD,OAAOC,GAAKD,EAAE9D,YAAc+D,GAAKD,EAAE/D,cAErC,OACE8B,GACCmC,EAAa/D,UACX8D,EAAIC,EAAajE,YAAciE,EAAa9D,QAEhD,IAKC+D,GAAsB,WAC1B,GAA6B,gBAAf,OAAVpG,QAAU,IAAVA,OAAA,EAAAA,EAAY+C,UACdW,EAAWQ,GAAUoB,GAAmB,cAAcD,QAAQ,KAC9DzB,GACEM,IAAWoB,GAAmB,cAAgB,IAAID,QAAQ,SAEvD,CACL,IAGMgB,IAHuB,OAAVrG,QAAU,IAAVA,OAAA,EAAAA,EAAYa,UAC3BkE,OAAOU,KAAKzF,EAAWa,UAAUyF,QAAO,SAACC,GAAD,MAAe,eAAPA,KAChD,IACqBxC,QAAO,SAACC,EAAK2B,GACpC,OAAO3B,EAAMsB,GAAmBK,KAC/B,GACHjC,EAAWQ,GAAUmC,EAAMhB,QAAQ,KACnCzB,GAAkBM,IAAWmC,EAAQ,IAAIhB,QAAQ,OAI/CmB,GAAwB,SAACC,GAC7BvD,EAAc,2BAAKlD,GAAN,kBAAmByG,EAAEC,OAAO/F,KAAO8F,EAAEC,OAAO9F,UAGrD+F,GAA6B,SAAC/G,GAAD,OAAS,SAAC6G,GAC3C,IAAM7F,EAAQ6F,EAAEC,OAAO9F,MAAMgG,QAAQ,WAAY,IACjD1D,EAAc,2BACTlD,GADQ,kBAEVJ,EAFU,YAAC,eAAD,OAECI,QAFD,IAECA,OAFD,EAECA,EAAaJ,IAFd,kBAEqB6G,EAAEC,OAAO/F,KAAOC,SAI9CiG,GAA8B,SAACC,EAAMC,GAAP,OAAgB,SAACN,GAAO,IAAD,EACnD7F,EAAQ6F,EAAEC,OAAO9F,MAAMgG,QAAQ,WAAY,IACjD1D,EAAc,2BACTlD,GADQ,kBAEV8G,EAFU,YAAC,eAAD,OAGN9G,QAHM,IAGNA,OAHM,EAGNA,EAAa8G,IAHP,kBAIRC,EAJQ,YAAC,eAAD,OAKJ/G,QALI,IAKJA,GALI,UAKJA,EAAa8G,UALT,aAKJ,EAAqBC,IALjB,kBAMNN,EAAEC,OAAO/F,KAAOC,WAMnBoG,GAA+B,SAACF,EAAMC,EAAME,GAAb,OAAsB,SAACR,GAAO,IAAD,MAC1D7F,EAAQ6F,EAAEC,OAAO9F,MAAMgG,QAAQ,WAAY,IACjD1D,EAAc,2BACTlD,GADQ,kBAEV8G,EAFU,YAAC,eAAD,OAGN9G,QAHM,IAGNA,OAHM,EAGNA,EAAa8G,IAHP,kBAIRC,EAJQ,YAAC,eAAD,OAKJ/G,QALI,IAKJA,GALI,UAKJA,EAAa8G,UALT,aAKJ,EAAqBC,IALjB,kBAMNE,EANM,YAAC,eAAD,OAOFjH,QAPE,IAOFA,GAPE,UAOFA,EAAa8G,UAPX,iBAOF,EAAqBC,UAPnB,aAOF,EAA6BE,IAP3B,kBAQJR,EAAEC,OAAO/F,KAAOC,aA+ErBsG,IAAoB,CAAC,EAAG,EAAG,GAAGC,SAASvE,GACvCwE,GAA+B,QAATxE,EAE5B,OACE,sBAAKyE,UAAW5E,EAAQxB,IAAxB,UACE,eAACqG,EAAA,EAAD,CACEC,EAAG,EACHC,aAAc,EACd/H,SAAS,SACTgI,IAAK,EACLJ,UAAW5E,EAAQrB,OALrB,UAOE,cAACf,EAAA,EAAD,CAAYpB,QAAQ,KAAKyI,cAAY,EAACC,MAAM,SAA5C,0DAGA,eAACxH,EAAA,EAAD,CAAMI,WAAS,EAACqH,QAAQ,gBAAgBnH,WAAW,SAAnD,UACE,cAACN,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,qBAAKyH,IAAKnG,EAAM2F,UAAW5E,EAAQf,KAAMoG,IAAI,gBAE/C,eAAC3H,EAAA,EAAD,CAAMC,MAAI,EAAV,UACE,eAACC,EAAA,EAAD,CACEpB,QAAQ,QACR0I,MAAM,OACNzI,MAAM,YACNmI,UAAW5E,EAAQZ,aAJrB,iDAOGqF,GAAgB,YAAQ7D,GAAe,MAE1C,eAAChD,EAAA,EAAD,CACEpB,QAAQ,QACR0I,MAAM,OACNzI,MAAM,YACNmI,UAAW5E,EAAQZ,aAJrB,gDAOGqF,GAAgB,YAAQ/D,GAAgB,MAE3C,eAAC9C,EAAA,EAAD,CACEpB,QAAQ,QACR0I,MAAM,OACNzI,MAAM,YACNmI,UAAW5E,EAAQZ,aAJrB,yDAOGqF,GAAgB,YAAQ3D,GAAgB,MAE3C,eAAClD,EAAA,EAAD,CACEpB,QAAQ,QACR0I,MAAM,OACNzI,MAAM,YACNmI,UAAW5E,EAAQZ,aAJrB,2CAOGuF,GAAmB,YAAQ3D,GAAY,MAE1C,eAACpD,EAAA,EAAD,CACEpB,QAAQ,QACR0I,MAAM,OACNzI,MAAM,YACNmI,UAAW5E,EAAQZ,aAJrB,0CAOGuF,GAAmB,YAAQzD,IAAmB,eAKvD,cAAC2D,EAAA,EAAD,CAAKC,EAAG,EAAR,SACE,eAACpH,EAAA,EAAD,CAAMI,WAAS,EAACwH,UAAU,SAASC,QAAS,EAA5C,UACY,IAATpF,GACC,eAACzC,EAAA,EAAD,CAAMC,MAAI,EAAV,UACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,kDAGA,eAACgJ,EAAA,EAAD,CACEtH,KAAK,WACLC,MAAOZ,EAAW+C,UAAY,GAC9BhD,SAAUyG,GAHZ,UAKE,cAAC0B,EAAA,EAAD,CACEtH,MAAM,aACNuH,QAAS,cAACC,EAAA,EAAD,IACT1H,MAAM,eAER,cAACwH,EAAA,EAAD,CACEtH,MAAM,SACNuH,QAAS,cAACC,EAAA,EAAD,IACT1H,MAAM,iBAMJ,IAATkC,GACC,qCACE,cAACzC,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,KAApB,yCAEF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,eAAC6H,EAAA,EAAD,CACEtH,KAAK,wBACLC,MAAOZ,EAAWgD,uBAAyB,GAC3CjD,SAAUyG,GAHZ,UAKE,cAAC0B,EAAA,EAAD,CACEtH,MAAM,QACNuH,QAAS,cAACC,EAAA,EAAD,IACT1H,MAAM,uMAIR,cAACwH,EAAA,EAAD,CACEtH,MAAM,YACNuH,QAAS,cAACC,EAAA,EAAD,IACT1H,MAAM,iEAKa,eAAxBV,EAAW+C,UAC2B,UAArC/C,EAAWgD,uBACT,eAAC7C,EAAA,EAAD,CACEC,MAAI,EACJG,WAAS,EACTD,GAAI,EACJE,eAAe,gBACfC,WAAW,SALb,UAOE,cAACN,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAC,EAAD,CACEM,MAAM,cACNC,KAAK,aACLC,OAAiB,OAAVZ,QAAU,IAAVA,GAAA,UAAAA,EAAYqI,kBAAZ,eAAwBhF,aAAc,GAC7CtD,SAAU4G,GAA2B,cACrC5F,YAAW,OAACf,QAAD,IAACA,GAAD,UAACA,EAAYqI,kBAAb,aAAC,EAAwBvD,oBAGxC,cAAC3E,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,kBAEF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAC,EAAD,CACEM,MAAM,kBACNC,KAAK,iBACLC,OAAiB,OAAVZ,QAAU,IAAVA,GAAA,UAAAA,EAAYqI,kBAAZ,eAAwBvD,iBAAkB,GACjD/E,SAAU4G,GAA2B,cACrC5F,YAAW,OAACf,QAAD,IAACA,GAAD,UAACA,EAAYqI,kBAAb,aAAC,EAAwBhF,mBAMrB,eAAxBrD,EAAW+C,UAC2B,cAArC/C,EAAWgD,uBACT,qCACE,cAAC7C,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,KAApB,yBAEF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,8RAQD8C,EAA0B9B,KAAI,SAACC,GAAW,IAAD,kBACxC,OACE,qCACE,cAACC,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,SACGiB,EAAMP,SAGVO,EAAM8B,UACL,eAAC7B,EAAA,EAAD,CACEC,MAAI,EACJE,GAAI,EACJC,WAAS,EACTC,eAAe,gBACfC,WAAW,SALb,UAOE,cAACN,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAC,EAAD,CACEM,MAAM,SACNC,KAAMT,EAAMN,IACZgB,OACY,OAAVZ,QAAU,IAAVA,GAAA,UAAAA,EAAYqI,kBAAZ,mBAAwBvH,cAAxB,eACEZ,EAAMN,OACH,GAEPG,SAAU8G,GACR,aACA,UAEF9F,YACG,OAACf,QAAD,IAACA,GAAD,UAACA,EAAYqI,kBAAb,iBAAC,EAAwBrH,eAAzB,aAAC,EACAd,EAAMN,UAKd,cAACO,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,kBAEF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAC,EAAD,CACEM,MAAM,UACNC,KAAMT,EAAMN,IACZgB,OACY,OAAVZ,QAAU,IAAVA,GAAA,UAAAA,EAAYqI,kBAAZ,mBAAwBrH,eAAxB,eACEd,EAAMN,OACH,GAEPG,SAAU8G,GACR,aACA,WAEF9F,YACG,OAACf,QAAD,IAACA,GAAD,UAACA,EAAYqI,kBAAb,iBAAC,EAAwBvH,cAAzB,aAAC,EACAZ,EAAMN,aAOhB,cAACO,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAC,EAAD,CACEO,KAAMT,EAAMN,IACZgB,OACY,OAAVZ,QAAU,IAAVA,GAAA,UAAAA,EAAYqI,kBAAZ,eAAyBnI,EAAMN,OAAQ,GAEzCG,SAAU4G,GACR,8BAad,IAAT/D,GACC,qCACE,cAACzC,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,KAApB,gDAIF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,yTAQF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,eAAC6H,EAAA,EAAD,CACEtH,KAAK,oBACLC,MAAOZ,EAAWiD,mBAAqB,GACvClD,SAAUyG,GAHZ,UAKE,cAAC0B,EAAA,EAAD,CACEtH,MAAM,QACNuH,QAAS,cAACC,EAAA,EAAD,IACT1H,MAAM,qNAIR,cAACwH,EAAA,EAAD,CACEtH,MAAM,YACNuH,QAAS,cAACC,EAAA,EAAD,IACT1H,MAAM,iEAKa,WAAxBV,EAAW+C,UACuB,UAAjC/C,EAAWiD,mBACT,eAAC9C,EAAA,EAAD,CACEC,MAAI,EACJG,WAAS,EACTD,GAAI,EACJE,eAAe,gBACfC,WAAW,SALb,UAOE,cAACN,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAC,EAAD,CACEM,MAAM,cACNC,KAAK,aACLC,OAAiB,OAAVZ,QAAU,IAAVA,GAAA,UAAAA,EAAYsI,cAAZ,eAAoBjF,aAAc,GACzCtD,SAAU4G,GAA2B,UACrC5F,YAAW,OAACf,QAAD,IAACA,GAAD,UAACA,EAAYsI,cAAb,aAAC,EAAoBxD,oBAGpC,cAAC3E,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,kBAEF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAC,EAAD,CACEM,MAAM,kBACNC,KAAK,iBACLC,OAAiB,OAAVZ,QAAU,IAAVA,GAAA,UAAAA,EAAYsI,cAAZ,eAAoBxD,iBAAkB,GAC7C/E,SAAU4G,GAA2B,UACrC5F,YAAW,OAACf,QAAD,IAACA,GAAD,UAACA,EAAYsI,cAAb,aAAC,EAAoBjF,mBAMjB,WAAxBrD,EAAW+C,UACuB,cAAjC/C,EAAWiD,mBACT,qCACE,cAAC9C,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,KAApB,yBAEF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,8RAQD8C,EAA0B9B,KAAI,SAACC,GAAW,IAAD,kBACxC,OACE,qCACE,cAACC,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,SACGiB,EAAMP,SAGVO,EAAM8B,UACL,eAAC7B,EAAA,EAAD,CACEC,MAAI,EACJE,GAAI,EACJC,WAAS,EACTC,eAAe,gBACfC,WAAW,SALb,UAOE,cAACN,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAC,EAAD,CACEM,MAAM,SACNC,KAAMT,EAAMN,IACZgB,OACY,OAAVZ,QAAU,IAAVA,GAAA,UAAAA,EAAYsI,cAAZ,mBAAoBxH,cAApB,eAA6BZ,EAAMN,OACnC,GAEFG,SAAU8G,GACR,SACA,UAEF9F,YACG,OAACf,QAAD,IAACA,GAAD,UAACA,EAAYsI,cAAb,iBAAC,EAAoBtH,eAArB,aAAC,EAA8Bd,EAAMN,UAI5C,cAACO,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,kBAEF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAC,EAAD,CACEM,MAAM,UACNC,KAAMT,EAAMN,IACZgB,OACY,OAAVZ,QAAU,IAAVA,GAAA,UAAAA,EAAYsI,cAAZ,mBAAoBtH,eAApB,eAA8Bd,EAAMN,OACpC,GAEFG,SAAU8G,GACR,SACA,WAEF9F,YACG,OAACf,QAAD,IAACA,GAAD,UAACA,EAAYsI,cAAb,iBAAC,EAAoBxH,cAArB,aAAC,EAA6BZ,EAAMN,aAM7C,cAACO,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAAC,EAAD,CACEO,KAAMT,EAAMN,IACZgB,OAAiB,OAAVZ,QAAU,IAAVA,GAAA,UAAAA,EAAYsI,cAAZ,eAAqBpI,EAAMN,OAAQ,GAC1CG,SAAU4G,GAA2B,0BAYjD,IAAT/D,GACC,qCACE,cAACzC,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,KAApB,oDAIF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,+dAWF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,6UASF,cAAC,EAAD,CACEc,SAAUiH,GACVlH,KAAK,aACLE,WAAYA,OAKR,IAAT4C,GACC,qCACE,cAACzC,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,KAApB,oDAIF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,+dAWF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,6UASF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,eAACC,EAAA,EAAD,CAAYpB,QAAQ,QAAQsJ,MAAO,CAAEC,UAAW,IAAhD,UACE,cAAClB,EAAA,EAAD,CAAKmB,UAAU,OAAO3G,WAAW,OAAjC,kBADF,mKASF,cAAC,EAAD,CACE/B,SAAUiH,GACVlH,KAAK,OACLE,WAAYA,OAKR,IAAT4C,GACC,qCACE,cAACzC,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,KAApB,oDAIF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,eAACC,EAAA,EAAD,CAAYpB,QAAQ,QAAQsJ,MAAO,CAAEC,UAAW,IAAhD,UACE,cAAClB,EAAA,EAAD,CAAKmB,UAAU,OAAO3G,WAAW,OAAjC,oBADF,gJASF,cAAC,EAAD,CACE/B,SAAUiH,GACVlH,KAAK,SACLE,WAAYA,OAKjB4C,EAAO,GACN,qCACE,cAACzC,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,KAApB,oDAIF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,eAACC,EAAA,EAAD,CAAYpB,QAAQ,QAAQsJ,MAAO,CAAEC,UAAW,IAAhD,UACE,cAAClB,EAAA,EAAD,CAAKmB,UAAU,OAAO3G,WAAW,OAAjC,sDADF,8GAQF,cAAC,EAAD,CACE/B,SAAUiH,GACVlH,KAAM8C,EAAO,EACb5C,WAAYA,OAKR,QAAT4C,GACC,qCACE,cAACzC,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,KAApB,6DAIF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,gVASF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,0PAOF,cAACkB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAYpB,QAAQ,QAApB,quBAmBN,eAACkB,EAAA,EAAD,CAAMC,MAAI,EAACG,WAAS,EAACC,eAAe,gBAApC,UACY,IAAToC,GACC,cAAC8F,EAAA,EAAD,CACExJ,MAAM,YACND,QAAQ,YACR0J,QAppBM,WAClB,QAAQ,GACN,KAAc,IAAT/F,GAAuB,IAATA,EACjBC,EAAQ,GACR,MACF,KAAc,IAATD,EACHC,EAAQ,GACR,MACF,KAAc,IAATD,EACHC,EAAQ,GACR,MACF,KAAKD,EAAO,EACVC,EAAQD,EAAO,GACf,MACF,IAAc,QAATA,EACHC,EAAQ,GACRK,EAAcJ,GACd,MACF,QACED,EAAQD,KA8nBF,SAKY,QAATA,EAAiB,aAAe,YAG3B,QAATA,GACC,cAAC8F,EAAA,EAAD,CACExJ,MAAM,YACND,QAAQ,YACR0J,QAtoBU,WACtB,QAAQ,GACN,KAAc,IAAT/F,GAAuC,gBAAf,OAAV5C,QAAU,IAAVA,OAAA,EAAAA,EAAY+C,UAC7BF,EAAQ,GACR,MACF,KAAc,IAATD,GAAuC,YAAf,OAAV5C,QAAU,IAAVA,OAAA,EAAAA,EAAY+C,UAC7BF,EAAQ,GACR,MACF,KAAc,IAATD,EACHC,EAAQ,GACR+B,GAAiB5E,EAAW+C,UAC5B,MACF,KAAc,IAATH,EACHC,EAAQ,GACR+B,GAAiB5E,EAAW+C,UAC5B,MACF,KAAc,IAATH,EACHC,EAAQ,OACRuD,KACA,MACF,KAAc,IAATxD,EACgC,IAA/B0C,GAAmB,SACrBc,KACAvD,EAAQ,QAERA,EAAQ,GAEV,MACF,KAAc,IAATD,EACkC,IAAjC0C,GAAmB,WACrBc,KACAvD,EAAQ,QAERA,EAAQ,GAEV,MACF,KAAKD,EAAO,EAC2B,IAAjC0C,GAAmB1C,EAAO,IAC5BwD,KACAvD,EAAQ,QAERA,EAAQD,EAAO,GAEjB,MACF,QACEC,EAAQD,KAslBF,kCCv7BCgG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,iBCARhK,EAAQwK,YAAY,CACxB/H,QAAS,CACPgI,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,YAGVE,WAAY,CACVC,WACE,oKAINC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAejL,MAAOA,EAAtB,SACE,cAAC,EAAD,QAGJkL,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.189581a0.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/styles\";\nimport { TextField, InputAdornment } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({}));\n\nconst TextInput = (props) => {\n  const classes = useStyles();\n  return (\n    <TextField\n      {...props}\n      variant=\"outlined\"\n      color=\"secondary\"\n      size=\"small\"\n      InputLabelProps={{\n        shrink: true,\n      }}\n      InputProps={{\n        startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n      }}\n    />\n  );\n};\n\nexport default TextInput;\n","import { Grid, Typography } from \"@material-ui/core\";\nimport TextInput from \"./TextInput\";\nimport React from \"react\";\n\nconst nyHealthFields = [\n  {\n    text: \"Self-Employment Income (taxable, with all expenses deducted, if over $25,000)\",\n    key: \"selfEmploymentIncome\",\n  },\n  {\n    text: \"Income from Job 1 (if any over $25,000)\",\n    key: \"firstJobIncome\",\n  },\n  {\n    text: \"Income from Job 2 (if any over $25,000)\",\n    key: \"secondJobIncome\",\n  },\n  {\n    text: \"Income from Job 3 (if any over $25,000)\",\n    key: \"thirdJobIncome\",\n  },\n  {\n    text: \"Income from interest and/or dividends (if any over $25,000)\",\n    key: \"interestIncome\",\n  },\n];\n\nconst NyhCostForm = ({ type, onChange, formFields }) => (\n  <>\n    {nyHealthFields.map((field) => (\n      <>\n        <Grid item>\n          <Typography variant=\"body1\">{field.text}</Typography>\n        </Grid>\n        <Grid\n          item\n          xs={8}\n          container\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            <TextInput\n              label=\"Annual\"\n              name={field.key}\n              value={formFields?.nyHealth?.[type]?.annual?.[field.key] || \"\"}\n              onChange={onChange(\"nyHealth\", type, \"annual\")}\n              disabled={!!formFields?.nyHealth?.[type]?.monthly?.[field.key]}\n            />\n          </Grid>\n          <Grid item>\n            <Typography variant=\"body1\">OR</Typography>\n          </Grid>\n          <Grid item>\n            <TextInput\n              label=\"Monthly\"\n              name={field.key}\n              value={formFields?.nyHealth?.[type]?.monthly?.[field.key] || \"\"}\n              onChange={onChange(\"nyHealth\", type, \"monthly\")}\n              disabled={!!formFields?.nyHealth?.[type]?.annual?.[field.key]}\n            />\n          </Grid>\n        </Grid>\n      </>\n    ))}\n  </>\n);\n\nexport default NyhCostForm;\n","export default __webpack_public_path__ + \"static/media/CNYH_logo.5e9c055c.jpeg\";","import { makeStyles } from \"@material-ui/styles\";\nimport {\n  Typography,\n  FormControlLabel,\n  Grid,\n  Box,\n  RadioGroup,\n  Radio,\n  Button,\n} from \"@material-ui/core\";\nimport TextInput from \"./TextInput\";\nimport React from \"react\";\nimport NyhCostForm from \"./NyhCostForm\";\nimport logo from \"./CNYH_logo.jpeg\";\n\nconst useStyles = makeStyles((theme) => ({\n  app: {},\n  textPadding: {\n    paddingBottom: 16,\n  },\n  header: {\n    backgroundColor: theme.palette.common.white,\n    zIndex: 100,\n  },\n  logo: {\n    width: 180,\n    height: \"auto\",\n  },\n  calculations: {\n    fontWeight: \"bold\",\n  },\n}));\n\nconst individualWorksheetFields = [\n  { text: \"Premiums\", twoFields: true, key: \"premiums\" },\n  {\n    text: \"Dental Premiums (if covered separately)\",\n    twoFields: true,\n    key: \"dentalPremiums\",\n  },\n  {\n    text: \"Vision Premiums (if covered separately)\",\n    twoFields: true,\n    key: \"visionPremiums\",\n  },\n  {\n    text: \"Any other Premiums (e.g. long term care)\",\n    twoFields: true,\n    key: \"otherPremiums\",\n  },\n  {\n    text: \"Total Annual Deductible (write in $100,000 if you are uninsured)\",\n    twoFields: false,\n    key: \"totalAnnualDeductible\",\n  },\n  {\n    text: \"Deductible used last year (or on average)\",\n    twoFields: false,\n    key: \"deductibleLastYear\",\n  },\n  {\n    text: \"Annual Out-of-Pocket Max (if any)\",\n    twoFields: false,\n    key: \"annualMax\",\n  },\n  {\n    text: \"Estimate of Co-Pays or Coinsurance for medical visits, dental visits, eye-care visits, hearing visits, any other provider visits\",\n    twoFields: true,\n    key: \"visitCosts\",\n  },\n  {\n    text: \"Estimate of Co-Pays or Coinsurance for drugs\",\n    twoFields: true,\n    key: \"drugsCosts\",\n  },\n  {\n    text: \"Estimate of Co-Pays or Coinsurance for devices (for example, C-PAP, wheelchair, etc.)\",\n    twoFields: true,\n    key: \"devicesCosts\",\n  },\n  {\n    text: \"Payments for home care or long term care not covered by insurance\",\n    twoFields: true,\n    key: \"homeCareCosts\",\n  },\n  {\n    text: \"Any other health care payments you made for services normally covered by insurance plans\",\n    twoFields: true,\n    key: \"otherCoveredCosts\",\n  },\n  {\n    text: \"Payments you made out of pocket for health care not covered by your insurance (These may or may not be covered by NY Health depending on why they were not covered, and will not be included in the total – but are important to consider. If you wish to share information about these expenses, there will be an opportunity to do so later.)\",\n    twoFields: true,\n    key: \"otherNotCoveredCosts\",\n  },\n  {\n    text: \"Estimated cost of care or treatment that was recommended, but you could not afford it due to deductible or copay, and therefore did not receive it (This will be included in the total, since it would have been covered under NY Health.)\",\n    twoFields: true,\n    key: \"avoidedTreatmentCosts\",\n  },\n];\n\nconst brackets = [\n  { lowerBound: 0, upperBound: 24999, baseCost: 0, rate: 0 },\n  { lowerBound: 25000, upperBound: 49999, baseCost: 0, rate: 0.138 },\n  { lowerBound: 50000, upperBound: 74999, baseCost: 3450, rate: 0.169 },\n  { lowerBound: 75000, upperBound: 99999, baseCost: 7675, rate: 0.184 },\n  { lowerBound: 100000, upperBound: 199999, baseCost: 12275, rate: 0.216 },\n  {\n    lowerBound: 200000,\n    upperBound: Number.POSITIVE_INFINITY,\n    baseCost: 33875,\n    rate: 0.246,\n  },\n];\n\nfunction App() {\n  const classes = useStyles();\n  const [step, setStep] = React.useState(1);\n  const initialFormState = {\n    planType: \"individual\",\n    individualInputChoice: \"total\",\n    familyInputChoice: \"total\",\n  };\n  const [formFields, setFormFields] = React.useState(initialFormState);\n  const [monthlyCost, setMonthlyCost] = React.useState(0);\n  const [annualCost, setAnnualCost] = React.useState(0);\n  const [illnessCost, setIllnessCost] = React.useState(0);\n  const [nyhCost, setNyhCost] = React.useState(0);\n  const [nyhMonthlyCost, setNyhMonthlyCost] = React.useState(0);\n\n  const add = (arr) => {\n    return arr.reduce((acc, val) => {\n      return acc + +val;\n    }, 0);\n  };\n\n  const addCommas = (str) => {\n    if (str.length <= 6) return str;\n    let newString = \"\";\n    let j = 0;\n    for (let i = str.length - 3; i >= 0; i--) {\n      newString += str[i];\n      if (j % 3 === 0 && j !== 0 && i !== 0) {\n        newString += \",\";\n      }\n      j++;\n    }\n    newString = newString.split(\"\").reverse().join(\"\");\n    return newString + str.slice(-2);\n  };\n\n  const makeCalculations = (key) => {\n    let monthlyTotal = 0;\n    let annualTotal = 0;\n    let combinedTotal = 0;\n    if (formFields?.[`${key}InputChoice`] === \"total\") {\n      monthlyTotal = formFields?.[key]?.monthlyPayment\n        ? +formFields?.[key]?.monthlyPayment * 12\n        : 0;\n      annualTotal = formFields?.[key]?.annualCost\n        ? +formFields?.[key]?.annualCost\n        : 0;\n      combinedTotal = monthlyTotal + annualTotal;\n    } else if (formFields?.[`${key}InputChoice`] === \"worksheet\") {\n      monthlyTotal = formFields?.[key]?.monthly\n        ? add(Object.values(formFields?.[key]?.monthly)) * 12\n        : 0;\n      annualTotal = formFields?.[key]?.annual\n        ? add(Object.values(formFields?.[key]?.annual))\n        : 0;\n      combinedTotal =\n        monthlyTotal +\n        annualTotal +\n        +(formFields?.[key]?.deductibleLastYear || 0);\n    }\n    let illnessCost = 0;\n    if (formFields?.[key]?.annualMax) {\n      illnessCost =\n        +formFields?.[key]?.annualMax +\n        +(formFields?.[key]?.annual?.otherNotCoveredCosts || 0) +\n        +(formFields?.[key]?.monthly?.otherNotCoveredCosts || 0) * 12;\n    } else {\n      illnessCost =\n        combinedTotal + +(formFields?.[key]?.totalAnnualDeductible || 0);\n    }\n    setMonthlyCost(addCommas((combinedTotal / 12).toFixed(2)));\n    setAnnualCost(addCommas(combinedTotal.toFixed(2)));\n    setIllnessCost(\n      formFields?.[`${key}InputChoice`] === \"total\"\n        ? \"N/A\"\n        : addCommas(illnessCost.toFixed(2))\n    );\n  };\n\n  const makeNyhCalculation = (key) => {\n    let regularIncome = [];\n    let otherIncome = [];\n    if (formFields?.nyHealth?.[key]) {\n      Object.keys(formFields.nyHealth[key]).forEach((k) => {\n        Object.keys(formFields.nyHealth[key][k]).forEach((k2) => {\n          const value = formFields.nyHealth[key][k][k2];\n          if (k2 === \"selfEmploymentIncome\" || k2 === \"interestIncome\") {\n            otherIncome.push(k === \"annual\" ? +value : +value * 12);\n          } else {\n            regularIncome.push(k === \"annual\" ? +value : +value * 12);\n          }\n        });\n      });\n    }\n    const regularCost = regularIncome.reduce((acc, r) => {\n      const regularBracket = brackets.find(\n        (b) => r <= b.upperBound && r >= b.lowerBound\n      );\n      return (\n        acc +\n        (regularBracket.baseCost +\n          (r - regularBracket.lowerBound) * regularBracket.rate) *\n          0.2\n      );\n    }, 0);\n\n    const otherCost = otherIncome.reduce((acc, o) => {\n      const otherBracket = brackets.find(\n        (b) => o <= b.upperBound && o >= b.lowerBound\n      );\n      return (\n        acc +\n        (otherBracket.baseCost +\n          (o - otherBracket.lowerBound) * otherBracket.rate)\n      );\n    }, 0);\n\n    return regularCost + otherCost;\n  };\n\n  const makeNyhCalculations = () => {\n    if (formFields?.planType === \"individual\") {\n      setNyhCost(addCommas(makeNyhCalculation(\"individual\").toFixed(2)));\n      setNyhMonthlyCost(\n        addCommas((makeNyhCalculation(\"individual\") / 12).toFixed(2))\n      );\n    } else {\n      const familyKeys = formFields?.nyHealth\n        ? Object.keys(formFields.nyHealth).filter((el) => el !== \"individual\")\n        : [];\n      const total = familyKeys.reduce((acc, k) => {\n        return acc + makeNyhCalculation(k);\n      }, 0);\n      setNyhCost(addCommas(total.toFixed(2)));\n      setNyhMonthlyCost(addCommas((total / 12).toFixed(2)));\n    }\n  };\n\n  const handleFormFieldChange = (e) => {\n    setFormFields({ ...formFields, [e.target.name]: e.target.value });\n  };\n\n  const handleOnceNestedFormChange = (key) => (e) => {\n    const value = e.target.value.replace(/[^\\d.-]/g, \"\");\n    setFormFields({\n      ...formFields,\n      [key]: { ...formFields?.[key], [e.target.name]: value },\n    });\n  };\n\n  const handleTwiceNestedFormChange = (key1, key2) => (e) => {\n    const value = e.target.value.replace(/[^\\d.-]/g, \"\");\n    setFormFields({\n      ...formFields,\n      [key1]: {\n        ...formFields?.[key1],\n        [key2]: {\n          ...formFields?.[key1]?.[key2],\n          [e.target.name]: value,\n        },\n      },\n    });\n  };\n\n  const handleThriceNestedFormChange = (key1, key2, key3) => (e) => {\n    const value = e.target.value.replace(/[^\\d.-]/g, \"\");\n    setFormFields({\n      ...formFields,\n      [key1]: {\n        ...formFields?.[key1],\n        [key2]: {\n          ...formFields?.[key1]?.[key2],\n          [key3]: {\n            ...formFields?.[key1]?.[key2]?.[key3],\n            [e.target.name]: value,\n          },\n        },\n      },\n    });\n  };\n\n  const onBackClick = () => {\n    switch (true) {\n      case step === 2 || step === 3:\n        setStep(1);\n        break;\n      case step === 4:\n        setStep(2);\n        break;\n      case step === 5:\n        setStep(3);\n        break;\n      case step > 5:\n        setStep(step - 1);\n        break;\n      case step === \"end\":\n        setStep(1);\n        setFormFields(initialFormState);\n        break;\n      default:\n        setStep(step);\n    }\n  };\n\n  const onContinueClick = () => {\n    switch (true) {\n      case step === 1 && formFields?.planType === \"individual\":\n        setStep(2);\n        break;\n      case step === 1 && formFields?.planType === \"family\":\n        setStep(3);\n        break;\n      case step === 2:\n        setStep(4);\n        makeCalculations(formFields.planType);\n        break;\n      case step === 3:\n        setStep(5);\n        makeCalculations(formFields.planType);\n        break;\n      case step === 4:\n        setStep(\"end\");\n        makeNyhCalculations();\n        break;\n      case step === 5:\n        if (makeNyhCalculation(\"self\") === 0) {\n          makeNyhCalculations();\n          setStep(\"end\");\n        } else {\n          setStep(6);\n        }\n        break;\n      case step === 6:\n        if (makeNyhCalculation(\"spouse\") === 0) {\n          makeNyhCalculations();\n          setStep(\"end\");\n        } else {\n          setStep(7);\n        }\n        break;\n      case step > 6:\n        if (makeNyhCalculation(step - 7) === 0) {\n          makeNyhCalculations();\n          setStep(\"end\");\n        } else {\n          setStep(step + 1);\n        }\n        break;\n      default:\n        setStep(step);\n    }\n  };\n\n  const showCalculations = ![1, 2, 3].includes(step);\n  const showNyhCalculations = step === \"end\";\n\n  return (\n    <div className={classes.app}>\n      <Box\n        p={3}\n        borderBottom={1}\n        position=\"sticky\"\n        top={0}\n        className={classes.header}\n      >\n        <Typography variant=\"h5\" gutterBottom align=\"center\">\n          NY Health Savings Calculator for Individuals\n        </Typography>\n        <Grid container justify=\"space-between\" alignItems=\"center\">\n          <Grid item>\n            <img src={logo} className={classes.logo} alt=\"CNYH logo\" />\n          </Grid>\n          <Grid item>\n            <Typography\n              variant=\"body1\"\n              align=\"left\"\n              color=\"secondary\"\n              className={classes.calculations}\n            >\n              Cost of Current Coverage (Annually):\n              {showCalculations ? ` $${annualCost}` : \"\"}\n            </Typography>\n            <Typography\n              variant=\"body1\"\n              align=\"left\"\n              color=\"secondary\"\n              className={classes.calculations}\n            >\n              Cost of Current Coverage (Monthly):\n              {showCalculations ? ` $${monthlyCost}` : \"\"}\n            </Typography>\n            <Typography\n              variant=\"body1\"\n              align=\"left\"\n              color=\"secondary\"\n              className={classes.calculations}\n            >\n              Cost in case of serious illness or accident:\n              {showCalculations ? ` $${illnessCost}` : \"\"}\n            </Typography>\n            <Typography\n              variant=\"body1\"\n              align=\"left\"\n              color=\"secondary\"\n              className={classes.calculations}\n            >\n              Cost for NY Health (Annually):\n              {showNyhCalculations ? ` $${nyhCost}` : \"\"}\n            </Typography>\n            <Typography\n              variant=\"body1\"\n              align=\"left\"\n              color=\"secondary\"\n              className={classes.calculations}\n            >\n              Cost for NY Health (Monthly):\n              {showNyhCalculations ? ` $${nyhMonthlyCost}` : \"\"}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Box>\n      <Box p={6}>\n        <Grid container direction=\"column\" spacing={2}>\n          {step === 1 && (\n            <Grid item>\n              <Typography variant=\"body1\">\n                Is your current health coverage plan\n              </Typography>\n              <RadioGroup\n                name=\"planType\"\n                value={formFields.planType || \"\"}\n                onChange={handleFormFieldChange}\n              >\n                <FormControlLabel\n                  value=\"individual\"\n                  control={<Radio />}\n                  label=\"individual\"\n                />\n                <FormControlLabel\n                  value=\"family\"\n                  control={<Radio />}\n                  label=\"family\"\n                />\n              </RadioGroup>\n            </Grid>\n          )}\n\n          {step === 2 && (\n            <>\n              <Grid item>\n                <Typography variant=\"h6\">Current Health Care Costs</Typography>\n              </Grid>\n              <Grid item>\n                <RadioGroup\n                  name=\"individualInputChoice\"\n                  value={formFields.individualInputChoice || \"\"}\n                  onChange={handleFormFieldChange}\n                >\n                  <FormControlLabel\n                    value=\"total\"\n                    control={<Radio />}\n                    label=\"I know my TOTAL health cost (use this if you usually reach\n                      your job’s out-of-pocket maximum, use an HMO or Medical Home with \n                      comprehensive monthly fees, or want to put in a quick estimate)\"\n                  />\n                  <FormControlLabel\n                    value=\"worksheet\"\n                    control={<Radio />}\n                    label=\"I want to use a worksheet to get a more accurate answer\"\n                  />\n                </RadioGroup>\n              </Grid>\n\n              {formFields.planType === \"individual\" &&\n                formFields.individualInputChoice === \"total\" && (\n                  <Grid\n                    item\n                    container\n                    xs={8}\n                    justifyContent=\"space-between\"\n                    alignItems=\"center\"\n                  >\n                    <Grid item>\n                      <TextInput\n                        label=\"Annual Cost\"\n                        name=\"annualCost\"\n                        value={formFields?.individual?.annualCost || \"\"}\n                        onChange={handleOnceNestedFormChange(\"individual\")}\n                        disabled={!!formFields?.individual?.monthlyPayment}\n                      />\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"body1\">OR</Typography>\n                    </Grid>\n                    <Grid item>\n                      <TextInput\n                        label=\"Monthly Payment\"\n                        name=\"monthlyPayment\"\n                        value={formFields?.individual?.monthlyPayment || \"\"}\n                        onChange={handleOnceNestedFormChange(\"individual\")}\n                        disabled={!!formFields?.individual?.annualCost}\n                      />\n                    </Grid>\n                  </Grid>\n                )}\n\n              {formFields.planType === \"individual\" &&\n                formFields.individualInputChoice === \"worksheet\" && (\n                  <>\n                    <Grid item>\n                      <Typography variant=\"h5\">Worksheet</Typography>\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"body1\">\n                        Please use this worksheet to add up total health care\n                        cost. You may put in either last year’s actual costs or\n                        estimates of average costs in each line. If you use this\n                        worksheet, you will also receive an estimate of total\n                        cost in case of serious accident or illness.\n                      </Typography>\n                    </Grid>\n                    {individualWorksheetFields.map((field) => {\n                      return (\n                        <>\n                          <Grid item>\n                            <Typography variant=\"body1\">\n                              {field.text}\n                            </Typography>\n                          </Grid>\n                          {field.twoFields ? (\n                            <Grid\n                              item\n                              xs={8}\n                              container\n                              justifyContent=\"space-between\"\n                              alignItems=\"center\"\n                            >\n                              <Grid item>\n                                <TextInput\n                                  label=\"Annual\"\n                                  name={field.key}\n                                  value={\n                                    formFields?.individual?.annual?.[\n                                      field.key\n                                    ] || \"\"\n                                  }\n                                  onChange={handleTwiceNestedFormChange(\n                                    \"individual\",\n                                    \"annual\"\n                                  )}\n                                  disabled={\n                                    !!formFields?.individual?.monthly?.[\n                                      field.key\n                                    ]\n                                  }\n                                />\n                              </Grid>\n                              <Grid item>\n                                <Typography variant=\"body1\">OR</Typography>\n                              </Grid>\n                              <Grid item>\n                                <TextInput\n                                  label=\"Monthly\"\n                                  name={field.key}\n                                  value={\n                                    formFields?.individual?.monthly?.[\n                                      field.key\n                                    ] || \"\"\n                                  }\n                                  onChange={handleTwiceNestedFormChange(\n                                    \"individual\",\n                                    \"monthly\"\n                                  )}\n                                  disabled={\n                                    !!formFields?.individual?.annual?.[\n                                      field.key\n                                    ]\n                                  }\n                                />\n                              </Grid>\n                            </Grid>\n                          ) : (\n                            <Grid item>\n                              <TextInput\n                                name={field.key}\n                                value={\n                                  formFields?.individual?.[field.key] || \"\"\n                                }\n                                onChange={handleOnceNestedFormChange(\n                                  \"individual\"\n                                )}\n                              />\n                            </Grid>\n                          )}\n                        </>\n                      );\n                    })}\n                  </>\n                )}\n            </>\n          )}\n\n          {step === 3 && (\n            <>\n              <Grid item>\n                <Typography variant=\"h6\">\n                  Current Family Health Care Costs\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\">\n                  New York Health covers every individual with payment based on\n                  income, with no payment for individuals whose income is below\n                  $25,000. This means that there is no “family plan” under NY\n                  Health, but for the purposes of the cost comparison, this\n                  estimator will compare total cost per family.\n                </Typography>\n              </Grid>\n              <Grid item>\n                <RadioGroup\n                  name=\"familyInputChoice\"\n                  value={formFields.familyInputChoice || \"\"}\n                  onChange={handleFormFieldChange}\n                >\n                  <FormControlLabel\n                    value=\"total\"\n                    control={<Radio />}\n                    label=\"I know my family’s TOTAL health cost (use this if you usually reach\n                      your job’s out-of-pocket maximum, use an HMO or Medical Home with \n                      comprehensive monthly fees, or want to put in a quick estimate)\"\n                  />\n                  <FormControlLabel\n                    value=\"worksheet\"\n                    control={<Radio />}\n                    label=\"I want to use a worksheet to get a more accurate answer\"\n                  />\n                </RadioGroup>\n              </Grid>\n\n              {formFields.planType === \"family\" &&\n                formFields.familyInputChoice === \"total\" && (\n                  <Grid\n                    item\n                    container\n                    xs={8}\n                    justifyContent=\"space-between\"\n                    alignItems=\"center\"\n                  >\n                    <Grid item>\n                      <TextInput\n                        label=\"Annual Cost\"\n                        name=\"annualCost\"\n                        value={formFields?.family?.annualCost || \"\"}\n                        onChange={handleOnceNestedFormChange(\"family\")}\n                        disabled={!!formFields?.family?.monthlyPayment}\n                      />\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"body1\">OR</Typography>\n                    </Grid>\n                    <Grid item>\n                      <TextInput\n                        label=\"Monthly Payment\"\n                        name=\"monthlyPayment\"\n                        value={formFields?.family?.monthlyPayment || \"\"}\n                        onChange={handleOnceNestedFormChange(\"family\")}\n                        disabled={!!formFields?.family?.annualCost}\n                      />\n                    </Grid>\n                  </Grid>\n                )}\n\n              {formFields.planType === \"family\" &&\n                formFields.familyInputChoice === \"worksheet\" && (\n                  <>\n                    <Grid item>\n                      <Typography variant=\"h5\">Worksheet</Typography>\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"body1\">\n                        Please use this worksheet to add up total health care\n                        cost. You may put in either last year’s actual costs or\n                        estimates of average costs in each line. If you use this\n                        worksheet, you will also receive an estimate of total\n                        cost in case of serious accident or illness.\n                      </Typography>\n                    </Grid>\n                    {individualWorksheetFields.map((field) => {\n                      return (\n                        <>\n                          <Grid item>\n                            <Typography variant=\"body1\">\n                              {field.text}\n                            </Typography>\n                          </Grid>\n                          {field.twoFields ? (\n                            <Grid\n                              item\n                              xs={8}\n                              container\n                              justifyContent=\"space-between\"\n                              alignItems=\"center\"\n                            >\n                              <Grid item>\n                                <TextInput\n                                  label=\"Annual\"\n                                  name={field.key}\n                                  value={\n                                    formFields?.family?.annual?.[field.key] ||\n                                    \"\"\n                                  }\n                                  onChange={handleTwiceNestedFormChange(\n                                    \"family\",\n                                    \"annual\"\n                                  )}\n                                  disabled={\n                                    !!formFields?.family?.monthly?.[field.key]\n                                  }\n                                />\n                              </Grid>\n                              <Grid item>\n                                <Typography variant=\"body1\">OR</Typography>\n                              </Grid>\n                              <Grid item>\n                                <TextInput\n                                  label=\"Monthly\"\n                                  name={field.key}\n                                  value={\n                                    formFields?.family?.monthly?.[field.key] ||\n                                    \"\"\n                                  }\n                                  onChange={handleTwiceNestedFormChange(\n                                    \"family\",\n                                    \"monthly\"\n                                  )}\n                                  disabled={\n                                    !!formFields?.family?.annual?.[field.key]\n                                  }\n                                />\n                              </Grid>\n                            </Grid>\n                          ) : (\n                            <Grid item>\n                              <TextInput\n                                name={field.key}\n                                value={formFields?.family?.[field.key] || \"\"}\n                                onChange={handleOnceNestedFormChange(\"family\")}\n                              />\n                            </Grid>\n                          )}\n                        </>\n                      );\n                    })}\n                  </>\n                )}\n            </>\n          )}\n\n          {step === 4 && (\n            <>\n              <Grid item>\n                <Typography variant=\"h6\">\n                  Estimated Cost Under New York Health\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\">\n                  Your cost of New York Health is based on your income, not your\n                  health care needs. As the legislation currently exists, income\n                  is broken down into employment (for which the premium will be\n                  taken out with taxes withheld from your paycheck),\n                  self-employment (for which the premiums will be included in\n                  annual taxes or quarterly estimated payments) and dividend and\n                  capital gains income (for which the premiums will be included\n                  with quarterly estimated tax payments).\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\">\n                  There is a floor in each category of $25,000. For the purposes\n                  of this estimator, you may omit any job, interest income or\n                  dividend income that is less than $25,000 annually, but for\n                  those more than that, please enter the full amount, and the\n                  software will do the calculation, including subtracting the\n                  first $25,000.\n                </Typography>\n              </Grid>\n              <NyhCostForm\n                onChange={handleThriceNestedFormChange}\n                type=\"individual\"\n                formFields={formFields}\n              />\n            </>\n          )}\n\n          {step === 5 && (\n            <>\n              <Grid item>\n                <Typography variant=\"h6\">\n                  Estimated Cost Under New York Health\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\">\n                  Your cost of New York Health is based on your income, not your\n                  health care needs. As the legislation currently exists, income\n                  is broken down into employment (for which the premium will be\n                  taken out with taxes withheld from your paycheck),\n                  self-employment (for which the premiums will be included in\n                  annual taxes or quarterly estimated payments) and dividend and\n                  capital gains income (for which the premiums will be included\n                  with quarterly estimated tax payments).\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\">\n                  There is a floor in each category of $25,000. For the purposes\n                  of this estimator, you may omit any job, interest income or\n                  dividend income that is less than $25,000 annually, but for\n                  those more than that, please enter the full amount, and the\n                  software will do the calculation, including subtracting the\n                  first $25,000.\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\" style={{ marginTop: 12 }}>\n                  <Box component=\"span\" fontWeight=\"bold\">\n                    Self\n                  </Box>\n                  &nbsp;(you will enter income for other family members in the\n                  next screen. If you had no income over $25,000, click on the\n                  “Continue” button below.)\n                </Typography>\n              </Grid>\n              <NyhCostForm\n                onChange={handleThriceNestedFormChange}\n                type=\"self\"\n                formFields={formFields}\n              />\n            </>\n          )}\n\n          {step === 6 && (\n            <>\n              <Grid item>\n                <Typography variant=\"h6\">\n                  Estimated Cost Under New York Health\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\" style={{ marginTop: 12 }}>\n                  <Box component=\"span\" fontWeight=\"bold\">\n                    Spouse\n                  </Box>\n                  &nbsp;(or other family member earning over $25,000. If you are\n                  the only earner for the family click the “Continue” button\n                  below)\n                </Typography>\n              </Grid>\n              <NyhCostForm\n                onChange={handleThriceNestedFormChange}\n                type=\"spouse\"\n                formFields={formFields}\n              />\n            </>\n          )}\n\n          {step > 6 && (\n            <>\n              <Grid item>\n                <Typography variant=\"h6\">\n                  Estimated Cost Under New York Health\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\" style={{ marginTop: 12 }}>\n                  <Box component=\"span\" fontWeight=\"bold\">\n                    Other family member earning over $25,000\n                  </Box>\n                  &nbsp;(if no other family members earns more than $25,000,\n                  click the “Continue” button below))\n                </Typography>\n              </Grid>\n              <NyhCostForm\n                onChange={handleThriceNestedFormChange}\n                type={step - 7}\n                formFields={formFields}\n              />\n            </>\n          )}\n\n          {step === \"end\" && (\n            <>\n              <Grid item>\n                <Typography variant=\"h6\">\n                  Congratulations! Your comparison is complete.\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\">\n                  The figures used to estimate the cost of the New York Health\n                  plan are based on calculations made by the Rand corporation\n                  for the cost required to cover comprehensive medical, dental,\n                  eye, ear, mental and substance abuse care for ALL New York\n                  residents, if the New York Health Act passes as the bill is\n                  currently written.\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\">\n                  The Rand study did not include the $25,000 income floor that\n                  is included in the bill in its calculations for payments, so\n                  this estimator has been adapted to include that floor in\n                  covering the full costs as estimated by the Rand study.\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\">\n                  Both the costs and the income are only estimates, but they are\n                  the best estimates available at this time. The Rand study\n                  provided detailed information to back up its estimate of what\n                  it will cost to cover all health care for all New York\n                  residents if insurance profits are not covered, the state\n                  bargains as a single unit with pharmaceutical and device\n                  companies, and payments are channeled through a single payer\n                  to make the system more efficient and accountable and save on\n                  the cost of CEO salaries for multiple insurance companies. By\n                  their estimates on this basis, comprehensive health care\n                  coverage for all New Yorkers will cost $11 billion less per\n                  year than the partial coverage we currently experience costs\n                  today.\n                </Typography>\n              </Grid>\n            </>\n          )}\n\n          <Grid item container justifyContent=\"space-between\">\n            {step !== 1 && (\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={onBackClick}\n              >\n                {step === \"end\" ? \"Start Over\" : \"Go Back\"}\n              </Button>\n            )}\n            {step !== \"end\" && (\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={onContinueClick}\n              >\n                Continue\n              </Button>\n            )}\n          </Grid>\n        </Grid>\n      </Box>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ce002c\",\n    },\n    secondary: {\n      main: \"#3d8ceb\",\n    },\n  },\n  typography: {\n    fontFamily:\n      \"'Nunito Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI','Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans','Helvetica Neue', sans-serif\",\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}